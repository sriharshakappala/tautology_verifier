var search_data = {"index":{"searchIndex":["assumer","decider","extractor","parser","simulator","tautologyverifier","assign_random_truth_table()","check_for_tautology()","create_custom_attr()","create_custom_method()","decide_whether_tautology()","evaluate_expression()","extract_predicates()","generate_possible_truth_tables()","get_statements()","new()","new()","parse_statement()","substitute_truth_values_into_statement()","verify_tautology()","gemfile","gemfile.lock","readme"],"longSearchIndex":["assumer","decider","extractor","parser","simulator","tautologyverifier","assumer::assign_random_truth_table()","simulator#check_for_tautology()","decider#create_custom_attr()","decider#create_custom_method()","decider::decide_whether_tautology()","decider#evaluate_expression()","extractor::extract_predicates()","assumer::generate_possible_truth_tables()","tautologyverifier::get_statements()","decider::new()","simulator::new()","parser::parse_statement()","simulator::substitute_truth_values_into_statement()","tautologyverifier::verify_tautology()","","",""],"info":[["Assumer","","Assumer.html","",""],["Decider","","Decider.html","","<p>Decider evaluates the expression by substituting the truth table values\ninto the statement. <em>__</em> Decider …\n"],["Extractor","","Extractor.html","",""],["Parser","","Parser.html","",""],["Simulator","","Simulator.html","","<p>Simulator gets all the possible truth table values and calls `Decider` for\nchecking the truth value of …\n"],["TautologyVerifier","","TautologyVerifier.html","",""],["assign_random_truth_table","Assumer","Assumer.html#method-c-assign_random_truth_table","(predicate_array)",""],["check_for_tautology","Simulator","Simulator.html#method-i-check_for_tautology","()","<p>Main method which goes through the Simulator strategy.\n"],["create_custom_attr","Decider","Decider.html#method-i-create_custom_attr","(name)",""],["create_custom_method","Decider","Decider.html#method-i-create_custom_method","(name, &block)",""],["decide_whether_tautology","Decider","Decider.html#method-c-decide_whether_tautology","(simulated_statement)","<p>Deprecated usage of decision maker\n"],["evaluate_expression","Decider","Decider.html#method-i-evaluate_expression","()",""],["extract_predicates","Extractor","Extractor.html#method-c-extract_predicates","(statement)","<p>Extracts the unique redicates from a given propositional statement and\nreturns an array of it.\n"],["generate_possible_truth_tables","Assumer","Assumer.html#method-c-generate_possible_truth_tables","(predicate_array)",""],["get_statements","TautologyVerifier","TautologyVerifier.html#method-c-get_statements","()",""],["new","Decider","Decider.html#method-c-new","(propositional_statement, truth_values)",""],["new","Simulator","Simulator.html#method-c-new","(propositional_statement, predicate_array, random_truth_values, possible_truth_tables)",""],["parse_statement","Parser","Parser.html#method-c-parse_statement","(propositional_statement)",""],["substitute_truth_values_into_statement","Simulator","Simulator.html#method-c-substitute_truth_values_into_statement","(propositional_statement, random_truth_values)","<p>Deprecated usage of statement simulator\n"],["verify_tautology","TautologyVerifier","TautologyVerifier.html#method-c-verify_tautology","()",""],["Gemfile","","Gemfile.html","","<p>source &#39;rubygems.org&#39;\n<p>group :development do\n\n<pre class=\"ruby\"><span class=\"ruby-identifier\">gem</span> <span class=\"ruby-string\">&#39;pry&#39;</span>\n</pre>\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>GEM\n\n<pre>remote: https://rubygems.org/\nspecs:\n  coderay (1.1.0)\n  diff-lcs (1.2.5)\n  method_source (0.8.2) ...</pre>\n"],["README","","README_md.html","","<p>Tautology Verifier\n<p>How to run?\n\n<pre>$ git clone https://github.com/sriharshakappala/tautology_verifier.git\n ...</pre>\n"]]}}